{"name": "test_password_change_successes", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=122.0.6261.95)\nStacktrace:\n\tGetHandleVerifier [0x00007FF780AEAD22+56930]\n\t(No symbol) [0x00007FF780A5F622]\n\t(No symbol) [0x00007FF7809142E5]\n\t(No symbol) [0x00007FF7808F1D4C]\n\t(No symbol) [0x00007FF7809823F7]\n\t(No symbol) [0x00007FF780997891]\n\t(No symbol) [0x00007FF78097BA43]\n\t(No symbol) [0x00007FF78094D438]\n\t(No symbol) [0x00007FF78094E4D1]\n\tGetHandleVerifier [0x00007FF780E66AAD+3709933]\n\tGetHandleVerifier [0x00007FF780EBFFED+4075821]\n\tGetHandleVerifier [0x00007FF780EB817F+4043455]\n\tGetHandleVerifier [0x00007FF780B89756+706710]\n\t(No symbol) [0x00007FF780A6B8FF]\n\t(No symbol) [0x00007FF780A66AE4]\n\t(No symbol) [0x00007FF780A66C3C]\n\t(No symbol) [0x00007FF780A568F4]\n\tBaseThreadInitThunk [0x00007FFDD076257D+29]\n\tRtlUserThreadStart [0x00007FFDD1C8AA58+40]", "trace": "self = <tests.account_test.TestMyAccount object at 0x0000024BB9C2E210>\n\n    @pytest.fixture(autouse=True)\n    # pre steps before starting each test\n    def setup_login_test(self):\n        global top_bar_page\n        global login_page\n        global account_page\n        top_bar_page = TopBar(self.driver)\n        login_page = top_bar_page.click_login()\n>       top_bar_page.click_switch_dropdown_list_my_account()\n\naccount_test.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\top_bar.py:79: in click_switch_dropdown_list_my_account\n    self.click(self.SWITCH_DROP_LIST_BTN)\n..\\pages\\base_page.py:36: in click\n    el: WebElement = self.wait_for_element_clickable(*locator)\n..\\pages\\base_page.py:33: in wait_for_element_clickable\n    return self.wait.until(EC.element_to_be_clickable((by, value)))\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:363: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024BB9FF9970>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF780A568F4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFDD076257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFDD1C8AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=122.0.6261.95)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF780AEAD22+56930]\nE       \t(No symbol) [0x00007FF780A5F622]\nE       \t(No symbol) [0x00007FF7809142E5]\nE       \t(No symbol) [0x00007FF7808F1D4C]\nE       \t(No symbol) [0x00007FF7809823F7]\nE       \t(No symbol) [0x00007FF780997891]\nE       \t(No symbol) [0x00007FF78097BA43]\nE       \t(No symbol) [0x00007FF78094D438]\nE       \t(No symbol) [0x00007FF78094E4D1]\nE       \tGetHandleVerifier [0x00007FF780E66AAD+3709933]\nE       \tGetHandleVerifier [0x00007FF780EBFFED+4075821]\nE       \tGetHandleVerifier [0x00007FF780EB817F+4043455]\nE       \tGetHandleVerifier [0x00007FF780B89756+706710]\nE       \t(No symbol) [0x00007FF780A6B8FF]\nE       \t(No symbol) [0x00007FF780A66AE4]\nE       \t(No symbol) [0x00007FF780A66C3C]\nE       \t(No symbol) [0x00007FF780A568F4]\nE       \tBaseThreadInitThunk [0x00007FFDD076257D+29]\nE       \tRtlUserThreadStart [0x00007FFDD1C8AA58+40]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "start": 1709708601732, "stop": 1709708601732, "uuid": "65c3ddb6-34f5-4d45-9099-e06ee2e7e752", "testCaseId": "41da1562a5fc3af86f6c179690e197ee", "fullName": "account_test.TestMyAccount#test_password_change_successes"}